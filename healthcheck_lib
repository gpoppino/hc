CMD_NOT_FOUND=42

SUDO=/usr/bin/sudo
[[ $(id -u) -eq 0 ]] && SUDO=""

_show_uptime()
{
    /usr/bin/uptime | awk 'BEGIN { FS="," } { print substr($1,2) }'
}

_show_kernelversion()
{
    /bin/uname -sr
}

_check_ntp()
{
    _check_process "ntpd"
    [ $? -ne 0 ] && return 1

    NTPQ=$(${SUDO} which ntpq 2>/dev/null)
    OFFSET=$(${NTPQ} -np | awk 'NR > 2 { sum+=( $9 >= 0 ) ? $9 : -$9; n++; } \
        END { if (n >= 1) { print sum/n } else { print 0 } }' | \
        cut -d. -f1 | sed 's/-\|\.//g')
    [ ${OFFSET} -gt ${NTP_OFFSET} ] && return 1

    return 0
}

_check_process()
{
    PROCESS=$1
    ps -ef | grep ${PROCESS} | grep -v "grep ${PROCESS}" >/dev/null 2>&1
    return $?
}

_check_tcp_port()
{
    PORT=$1
    netstat -lnt | awk '{ print $4 }' | grep :${PORT} >/dev/null 2>&1 || \
        return 1

    NETCAT=$(which netcat 2>/dev/null || which nc 2>/dev/null)
    ${NETCAT} -z $(hostname) ${PORT} >/dev/null 2>&1 || return 1
    return 0
}

_check_multipath_datapath()
{
    [ ! -e ${DATAPATH} ] && return ${CMD_NOT_FOUND}

    ${SUDO} ${DATAPATH} query device | \
        awk '$1 ~ /^[0-9].*/' | \
            grep -iE "close_dead|dead|invalid"

    [ $? -ge 1 ] && return 0
    return 1
}

_check_multipath_hdlm()
{
    [ ! -e ${DLNKMGR} ] && return ${CMD_NOT_FOUND}

    ${SUDO} ${DLNKMGR} view -path -item hd | \
        awk '$1 ~ /^[0-9]/ && $2 !~ /[O|o]nline/ { exit 1 }'
    RETVAL=$?

    return ${RETVAL}
}

_check_multipath()
{
    SUPPORTED_STORAGE="$@"

    for s in ${SUPPORTED_STORAGE};
    do
        ${s}
        RET=$?
        [ ${RET} -ne ${CMD_NOT_FOUND} ] && break
    done

    if [ ${RET} -eq ${CMD_NOT_FOUND} ] ;
    then
        echo " + No external storage found."
        return 1
    fi

    return ${RET}
}

_check_mounted_filesystems()
{
    ret=0
    while read fs;
    do
        if ! (mount 2>/dev/null | awk '{ print $2,$3 }' | grep ${fs} >/dev/null 2>&1) ;
        then
            echo " + Not mounted:${fs}"
            ret=1
        fi
    done

    return ${ret}
}

_check_filesystems_capacity()
{
    m=$(awk -v t="${FS_THRESHOLD}" 'int($5) > t { print $6 }')

    ret=0
    for fs in ${m};
    do
        used=$(${SUDO} df -P ${fs} | awk 'NR > 1 { print $5 }')
        echo " + Capacity ${used}: ${fs}"
        ret=1
    done

    return ${ret}
}

_check_paging_space_use()
{
    ps_use=$1
    if [[ ${ps_use} -ge ${PS_THRESHOLD} ]] ;
    then
        echo ${ps_use} \
            | awk '{ printf " + Paging space is at %d%%\n", $1 }'
        return 1
    fi
    return 0
}

_check_certificate_expiration()
{
    PORT=$1
    OPENSSL=/usr/bin/openssl

    expiration_date=$(echo | \
        ${OPENSSL} s_client -connect $(hostname -f):${PORT} 2>/dev/null | \
        sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | \
        ${OPENSSL} x509 -noout -subject -dates 2>/dev/null | \
        grep notAfter | cut -d= -f2 | awk '{ print $1,$2,$4 }'
    )
    [ -z $expiration_date ] && return 1

    cert_year=$(date --date="$expiration_date \
        ${DAYS_BEFORE_CERTIFICATE_EXPIRATION} days ago" +%Y)
    cert_month=$(date --date="$expiration_date \
        ${DAYS_BEFORE_CERTIFICATE_EXPIRATION} days ago" +%m)
    cert_day=$(date --date="$expiration_date \
        ${DAYS_BEFORE_CERTIFICATE_EXPIRATION} days ago" +%d)

    EXPIRED=0
    [ $(date +%Y) -gt $cert_year ] && EXPIRED=1
    [ $(date +%Y) -eq $cert_year ] && [ $(date +%m) -gt $cert_month ] && EXPIRED=1
    [ $(date +%Y) -eq $cert_year ] && [ $(date +%m) -eq $cert_month ] && \
        [ $(date +%d) -ge $cert_day ] && EXPIRED=1

    [ $EXPIRED -eq 1 ] && echo " + Certificate will expire or expired on: $expiration_date"
    
    return $EXPIRED 
}


_check_cpu_utilization()
{
    idle_column=$1

    cpu_util=$((100 - $(vmstat 1 4 | \
        awk -v n=$idle_column 'NR > 3 { sum += $n } END { print sum/3 }' | cut -d. -f1) ))
    
    if [ $cpu_util -ge ${CPU_THRESHOLD} ];
    then
        echo " + CPU utilization is equal or greater than %${CPU_THRESHOLD}"
        return 1
    fi

    return 0
}

